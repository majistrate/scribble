<?php

/**
 * @file
 * Provides an integration for the JQScribble library for Drupal.
 */

/**
 * Implements hook_menu().
 */
function scribble_menu() {
  $items['scribble/%scribble/blackboard'] = array(
    'title' => 'Scribble blackboard',
    // @todo 'title callback' => '',
    'page callback' => 'scribble_page',
    'page arguments' => array(1),
    'access arguments' => array('view scribble entities'),
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/%scribble/slideshow'] = array(
    'title' => 'Scribble slideshow',
    // @todo 'title callback' => '',
    'page callback' => 'scribble_snapshot_slideshow_page',
    'page arguments' => array(1),
    'access arguments' => array('view scribble entities'),
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/save'] = array(
    'page callback' => 'scribble_save_ajax',
    'access arguments' => array('view scribble entities'),
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/add'] = array(
    'page callback' => 'scribble_add_ajax',
    'access arguments' => array('view scribble entities'),
    'file' => 'scribble.pages.inc',
  );
  $items['admin/config/media/scribble/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scribble_configuration_form'),
    'access arguments' => array('administer scribble entities'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/media/scribble/%scribble/image-list'] = array(
    'title' => 'Manage scribble images',
    // @todo 'title callback' => '',
    'page callback' => 'scribble_image_list_page',
    'page arguments' => array(4),
    'access arguments' => array('administer scribble entities'),
    'file' => 'scribble.pages.inc',
  );
  $items['admin/config/media/scribble/%scribble/remove-image/%'] = array(
    'title' => 'Remove image',
    // @todo 'title callback' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scribble_remove_image_form', 4, 6),
    'access arguments' => array('administer scribble entities'),
    'file' => 'scribble.pages.inc',
  );

  return $items;
}

/*
 * Implements hook_library().
 * variable_get('scribble_save_dropped_img', FALSE),
 */
function scribble_library() {
  $settings = array(
    'scribble' => array(
      'bgImagePath' => url(variable_get('scribble_files_directory', 'sites/default/files/scribble'), array('absolute' => TRUE)),
      'saveURL' => url('scribble/save', array('absolute' => TRUE)),
      'addURL' =>  url('scribble/add', array('absolute' => TRUE)),
     ),
  );
  $libraries['jqscribble'] = array(
    'title' => t('JQScribble'),
    'website' => 'https://github.com/jimdoescode/jqScribble',
    'version' => '1.0',
    'js' => array(
      libraries_get_path('jqscribble') . '/jquery.jqscribble.js' => array(
        'type' => 'file',
      ),
      libraries_get_path('jqscribble') . '/jqscribble.extrabrushes.js' => array(
        'type' => 'file',
      ),
      drupal_get_path('module', 'scribble') . '/scribble.js' => array(
        'type' => 'file',
      ),
      array(
        'type' => 'setting',
        'data' => $settings,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'scribble') . '/theme/scribble.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function scribble_theme($existing, $type, $theme, $path) {
  return array(
    'scribble_blackboard' => array(
      'variables' => array(
        'width' => 900,
        'height' => 300,
        'brushes' => array(),
        'scribble_id' => NULL,
      ),
      'template' => 'scribble-blackboard',
      'path' => drupal_get_path('module', 'scribble') . '/theme',
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function scribble_entity_info() {
  $entities = array(
    'scribble' => array(
      'module' => 'scribble',
      'label' => t('Scribble'),
      'access callback' => 'scribble_access',
      'view callback' => 'scribble_view',
      'entity class' => 'Scribble',
      'controller class' => 'ScribbleController',
      'metadata controller class' => 'ScribbleMetadataController',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'base table' => 'scribble',
      'entity keys' => array(
        'id' => 'sid',
        'label' => 'label',
        'name' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'snapshot_administration' => array(
          'label' => t('Administer images'),
          'custom settings' => FALSE,
        ),
      ),
      'admin ui' => array(
        'controller class' => 'ScribbleUIController',
        'path' => 'admin/config/media/scribble',
        'menu wildcard' => '%scribble',
      ),
    ),
  );

  return $entities;
}

/**
 * Implements hook_permission().
 */
function scribble_permission() {
  return array(
    'view scribble entities' => array(
      'title' => t('View Scribble blackboards.'),
    ),
    'administer scribble entities' => array(
      'title' => t('Administer Scribble entities.'),
    ),
  );
}

/**
 * Access callback for scribble.
 */
function scribble_access($op, $sharemessage, $account = NULL, $entity_type = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view sscribble entities', $account);
    default:
      return user_access('administer scribble entities', $account);
  }
}

/**
 * Getter for the latest scribble image.
 *
 * @return
 *   Filename of the newest file or NULL if none was found.
 */
function scribble_get_newest($sid) {
  $results = db_query('SELECT scribble_image_fid FROM {field_data_scribble_image} WHERE entity_id = :sid ORDER BY delta DESC', array(':sid' => $sid))
    ->fetchAssoc();
  if (!empty($results['scribble_image_fid'])) {
    $file = file_load($results['scribble_image_fid']);
    return $file->filename;
  }
  return NULL;
}

/**
 * Getter for brushes.
 *
 * @return array
 *   The list of available brushes.
 */
function scribble_get_brushes() {
  return array(
    'BasicBrush' => 'Basic',
    'LineBrush' => 'Line',
    'CrossBrush' => 'Cross',
  );
}

/**
 * Share message form.
 */
function scribble_form($form, &$form_state, $scribble) {
  $form_state['scribble'] = $scribble;
  $sid = entity_id('scribble', $scribble);

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->label) ? $scribble->label : '',
    '#weight' => 0,
  );

  if (empty($sid)) {
    $form['name'] = array(
      '#type' => 'machine_name',
      '#title' => t('Machine Name'),
      '#machine_name' => array(
        'exists' => 'scribble_check_existing_machine_name',
        'source' => array('label'),
      ),
      '#required' => TRUE,
      '#weight' => 1,
    );
  }

  field_attach_form('scribble', $scribble, $form, $form_state);

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->width) ? $scribble->width : '',
    '#weight' => 2,
    '#description' => t('Width of the blackboard canvas in pixel.'),
    '#size' => 10,
    '#maxlength' => 5,
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->width) ? $scribble->width : '',
    '#weight' => 3,
    '#description' => t('Width of the blackboard canvas in pixel.'),
    '#size' => 10,
    '#maxlength' => 5,
  );

  // Don't display the image field, it should not be editable because it's only
  // a backend container for the scribble snapshots.
  $form['scribble_image']['#access'] = FALSE;
  $form['scribble_image_snapshots']['#access'] = FALSE;

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 105,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save scribble'),
    '#submit' => $submit + array('scribble_form_submit'),
  );

  return $form;
}

/**
 * Returns whether a machine name already exists.
 */
function scribble_check_existing_machine_name($value) {
  return db_query_range('SELECT 1 FROM {scribble} WHERE name = :name', 0, 1, array(':name' => $value))->fetchField();
}

/**
 * Share message form submit.
 */
function scribble_form_submit($form, &$form_state) {
  $scribble = $form_state['scribble'];

  entity_form_submit_build_entity('scribble', $scribble, $form, $form_state);
  scribble_save($scribble);

  $info = entity_get_info('scribble');
  $form_state['redirect'] = $info['admin ui']['path'];

  drupal_set_message(t('Scribble %title saved.', array('%title' => entity_label('sharemessage', $scribble))));
}

/**
 * Saves a scribble entity.
 */
function scribble_save($scribble) {
  entity_save('scribble', $scribble);
}

/**
 * Deletes a single scribble entity.
 */
function scribble_delete($scribble) {
  entity_delete('scribble', entity_id('scribble', $scribble));
}

/**
 * Delete multiple scribble entities.
 */
function scribble_delete_multiple($scribble_ids) {
  entity_delete_multiple('scribble', $scribble_ids);
}

/**
 * Load a scribble.
 */
function scribble_load($sid, $reset = FALSE) {
  $scribble = scribble_load_multiple(array($sid), array(), $reset);
  return $scribble ? reset($scribble) : FALSE;
}

/**
 * Load multiple scribbles based on certain conditions.
 */
function scribble_load_multiple($sids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('scribble', $sids, $conditions, $reset);
}

/**
 * View callback for scribble entities
 */
function scribble_view($entities, $view_mode, $langcode, $entity_type) {
  $output = '';
  foreach ($entities as $scribble) {
    $content = $scribble->buildContent($view_mode, $langcode);
    $output .= drupal_render($content);
  }
  return $output;
}

/**
 * Adds a given image to a given scribble entity.
 *
 * @param string $file_path
 *   The filepath of the image to save.
 * @param $scribble
 *   The scribble entity to save the image into.
 * @param $field_name
 *   The field on the entity that the image gets saved into.
 */
function scribble_add_image_to_scribble_field($file_path, $scribble, $field_name) {
  // Prepare filedata.
  $file_temp = file_get_contents($file_path);
  $file_temp = file_save_data($file_temp, $file_path, FILE_EXISTS_REPLACE);

  // Load the scribble and add image to image field of the scribble entity.
  $scribble->{$field_name}[LANGUAGE_NONE][] = array(
    'fid' => $file_temp->fid,
    'filename' => $file_temp->filename,
    'filemime' => $file_temp->filemime,
    'uid' => 1,
    'uri' => $file_temp->uri,
    'status' => 1,
  );
  $scribble->save();
}
