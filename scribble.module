<?php

/**
 * @file
 * Provides an integration for the JQScribble library for Drupal.
 */

/**
 * Implements hook_menu().
 */
function scribble_menu() {
  $items['scribble/blackboard'] = array(
    'title' => 'Scribble blackboard',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scribble_blackboard_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/save'] = array(
    'page callback' => 'scribble_save_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/add'] = array(
    'page callback' => 'scribble_add_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'scribble.pages.inc',
  );
  /*
  $items['admin/config/user-interface/scribble'] = array(
    'title' => 'Example RSS feed',
    'page callback' => 'example_feed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  */

  return $items;
}

/*
 * Implements hook_library().
 * variable_get('scribble_save_dropped_img', FALSE),
 */
function scribble_library() {
  $settings = array(
    'scribble' => array(
      'bgImagePath' => url(variable_get('scribble_files_directory', 'sites/default/files/scribble'), array('absolute' => TRUE)),
      'saveURL' => url('scribble/save', array('absolute' => TRUE)),
      'addURL' =>  url('scribble/add', array('absolute' => TRUE)),
      'newestScribble' => scribble_get_newest(),
     ),
  );
  $libraries['jqscribble'] = array(
    'title' => t('JQScribble'),
    'website' => 'https://github.com/jimdoescode/jqScribble',
    'version' => '1.0',
    'js' => array(
      libraries_get_path('jqscribble') . '/jquery.jqscribble.js' => array(
        'type' => 'file',
      ),
      libraries_get_path('jqscribble') . '/jqscribble.extrabrushes.js' => array(
        'type' => 'file',
      ),
      drupal_get_path('module', 'scribble') . '/scribble.js' => array(
        'type' => 'file',
      ),
      array(
        'type' => 'setting',
        'data' => $settings,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'scribble') . '/theme/scribble.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function scribble_theme($existing, $type, $theme, $path) {
  return array(
    'scribble_blackboard' => array(
      'variables' => array(),
      'template' => 'scribble-blackboard',
      'path' => drupal_get_path('module', 'scribble') . '/theme',
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function scribble_entity_info() {
  $entities = array(
    'scribble' => array(
      'module' => 'scribble',
      'label' => t('Scribble'),
      'access callback' => 'scribble_access',
      'entity class' => 'Scribble',
      'controller class' => 'ScribbleController',
      'metadata controller class' => 'ScribbleMetadataController',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'base table' => 'scribble',
      'entity keys' => array(
        'id' => 'sid',
        'label' => 'label',
        'name' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'img_only' => array(
          'label' => t('Image only'),
          'custom settings' => FALSE,
        ),
      ),
      'admin ui' => array(
        'controller class' => 'ScribbleUIController',
        'path' => 'admin/config/media/scribble',
        'menu wildcard' => '%entity-object',
      ),
    ),
  );

  return $entities;
}

/**
 * Getter for the latest scribble image.
 *
 * @return
 *   Filename of the newest file.
 */
function scribble_get_newest() {
  $dir = variable_get('scribble_files_directory', 'sites/default/files/scribble');
  $files = array();
  $ignored = array('.', '..');
  foreach (scandir($dir) as $file) {
    if (!in_array($file, $ignored)) {
      $files[filemtime($dir . '/' . $file)] = $file;
    }
  }

  if (!empty($files)) {
    krsort($files);
    return array_shift($files);
  }
  return '';
}
