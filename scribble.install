<?php

/**
 * @file
 * Installation related functions for the scribble module.
 */

/**
 * Implements hook_requirements().
 *
 * Checks if the jqscribble library is in the libraries folder.
 *
 * @param $phase
 *   The phase in which requirements are checked.
 * @return array
 */
function scribble_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if (in_array($phase, array('install', 'runtime')) && !file_exists(libraries_get_path('jqscribble') . '/jquery.jqscribble.js')) {
  // Check if the jqscribble library is available.
    $requirements['jqscribble'] = array(
      'title' => $t('JQScribble Library'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('The JQScribble library was not found in the libraries folder. Please place the jquery.jqscribble.js file in sites/all/libraries/jqscribble.'),
    );
  }
  return $requirements;
}


/**
 * Implements hook_schema().
 */
function scribble_schema() {
  $schema['scribble'] = array(
    'description' => 'Contains share messages.',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Scribble ID.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Scribble Label.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Scribble (machine name).',
      ),
      /*'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),*/
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Date of change.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Creation date.',
      ),
      'width' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Canvas width.',
      ),
      'height' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Canvas height.',
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function scribble_install() {
  // This module renders the field values in it's own theme function, fields do
  // not to be displayed.
  $display_hidden = array(
    'display' => array(
      'default' => array(
        'type' => 'hidden',
      ),
    ),
  );

  // Check if sharemessage_title field is not already created.
  if (!field_info_field('scribble_title')) {
    $field = array(
      'field_name' => 'scribble_title',
      'type' => 'text',
      'locked' => TRUE,
      'translatable' => TRUE,
    );
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
        'field_name' => 'scribble_title',
        'entity_type' => 'scribble',
        'label' => 'Scribble title',
        'description' => 'Used as page title on any scribble',
        'bundle' => 'scribble',
        'widget' => array(
          'type' => 'text_textfield',
        ),
      ) + $display_hidden;
    field_create_instance($instance);
  }

  if (!field_info_field('field_scribble_brushes')) {
    $field_info = array(
      'field_name' => 'scribble_brushes',
      'settings' => array(
        'allowed_values' => array(),
        'allowed_values_function' => 'scribble_get_brushes',
      ),
      'type' => 'list_text',
      'locked' => TRUE,
      'cardinality' => -1,
    );
    field_create_field($field_info);
    $instance_info = array(
      'label' => 'Brushes',
      'widget' => array(
        'type' => 'options_buttons',
        'module' => 'options',
      ),
      'required' => 1,
      'default_value' => array(
        0 => array(
          'value' => 'BasicBrush',
        ),
      ),
      'field_name' => 'scribble_brushes',
      'entity_type' => 'scribble',
      'bundle' => 'scribble',
      'description' => 'Choose the brushes that will be available on your scribble page',
    ) + $display_hidden;
    field_create_instance($instance_info);
  }

  // Check if field is not already created.
  if (!field_info_field('scribble_image')) {
    $field = array(
      'field_name' => 'scribble_image',
      'type' => 'image',
      'locked' => TRUE,
    );
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
        'field_name' => 'scribble_image',
        'entity_type' => 'scribble',
        'label' => 'Image',
        'description' => 'This field will hold each snapshot image of the scribble',
        'bundle' => 'scribble',
        'widget' => array(
          'type' => 'image_image',
        ),
      ) + $display_hidden;
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function scribble_uninstall() {
  field_delete_field('scribble_title');
  field_delete_field('scribble_image');
  field_delete_field('scribble_brushes');
}
