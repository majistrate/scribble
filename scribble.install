<?php

/**
 * @file
 * Installation related functions for the scribble module.
 */

/**
 * Implements hook_requirements().
 *
 * Checks if the jqscribble library is in the libraries folder.
 *
 * @param $phase
 *   The phase in which requirements are checked.
 * @return array
 */
function scribble_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if (in_array($phase, array('install', 'runtime')) && !file_exists(libraries_get_path('jqscribble') . '/jquery.jqscribble.js')) {
  // Check if the jqscribble library is available.
    $requirements['jqscribble'] = array(
      'title' => $t('JQScribble Library'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('The JQScribble library was not found in the libraries folder. Please place the jquery.jqscribble.js file in sites/all/libraries/jqscribble.'),
    );
  }
  return $requirements;
}


/**
 * Implements hook_schema().
 */
function scribble_schema() {
  $schema['scribble'] = array(
    'description' => 'Contains share messages.',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Scribble ID.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Scribble Label.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Path alias.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Scribble (machine name).',
      ),
      /*'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),*/
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Date of change.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Creation date.',
      ),
      'width' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Canvas width.',
      ),
      'height' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Canvas height.',
      ),
      'brush_basic' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Basic brush.',
      ),
      'brush_basic' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Basic brush.',
      ),
      'settings' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional settings.',
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}